[{"uri":"http://fsprojects.github.io/FsUnitFsUnitTyped.html","title":"What is FsUnitTyped?\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \"../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\"\n#r \"../bin/FsUnit.NUnit/netstandard2.0/FsUnit.NUnit.dll\"\n\n(**\nWhat is FsUnitTyped?\n===============\n\n**FsUnitTyped** is a statically typed set of FsUnit operators that makes\nunit-testing with `FsUnit` even more safe and enjoyable (Available only for `NUnit`).\n\nNo more untyped constrains and tests like\n\n    1 |> should equal \"1\"\n\nFsUnitTyped from NuGet\n-----------------------\n\nThe `FsUnit.Typed` is part of `FsUnit` package for NUnit and can be [installed from NuGet](https://nuget.org/packages/FsUnit).\n\nSyntax\n-------\n\nWith FsUnitTyped, you can write unit tests like this:\n*)\n\nopen NUnit.Framework\nopen FsUnitTyped\n\n(**\nOne object equals or does not equal another:\n*)\n\n1 |> shouldEqual 1\n1 |> shouldNotEqual 2\n\n(**\nOne comparable value greater or smaller than another:\n*)\n\n11 |> shouldBeGreaterThan 10\n10 |> shouldBeSmallerThan 11\n\n\n(**\nA string contains specified substring:\n*)\n\"ships\" |> shouldContainText \"hip\"\n\n(**\nA List, Seq, or Array instance contains, does not contain a value or empty:\n*)\n[1] |> shouldContain 1\n[] |> shouldNotContain 1\n[] |> shouldBeEmpty\n\n(**\nA List or Array instance has a certain length:\n*)\n[|1;2;3;4|] |> shouldHaveLength 4\n\n(**\nA function should throw a certain type of exception:\n*)\n(fun _ -> failwith \"BOOM!\") |> shouldFail<System.Exception>\n\n(**\nA function should fail\n*)\nshouldFail (fun _ -> 5/0 |> ignore)"},{"uri":"http://fsprojects.github.io/FsUnitindex.html","title":"What is FsUnit?\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \"../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\"\n#r \"../bin/FsUnit.NUnit/netstandard2.0/FsUnit.NUnit.dll\"\n\nopen FsUnit\n\nlet anArray = []\nlet aCollection = System.Collections.Generic.List<int>()\nlet anObj = obj()\nlet otherObj = obj()\n\n(**\nWhat is FsUnit?\n===============\n\n**FsUnit** is a set of libraries that makes unit-testing with F# more enjoyable. It adds a special syntax to your favorite .NET testing framework.\nFsUnit currently supports NUnit, xUnit, and MsTest.\n\nThe goals of FsUnit are:\n\n* to make unit-testing feel more at home in F# , i.e., more functional.\n* to leverage existing test frameworks while at the same time adapting them to the F# language in new ways.\n\nNuGet packages are available for each of the supported testing frameworks:\n\n* [![NuGet Status](https://buildstats.info/nuget/FsUnit) - NUnit](https://www.nuget.org/packages/FsUnit/)\n* [![NuGet Status](https://buildstats.info/nuget/FsUnit.Xunit) - xUnit](https://www.nuget.org/packages/FsUnit.Xunit/)\n* [![NuGet Status](https://buildstats.info/nuget/Fs30Unit.MsTest) - MsTest](https://www.nuget.org/packages/Fs30Unit.MsTest/)\n\n\nSyntax\n-------\n\nWith FsUnit, you can write unit tests like this:\n*)\n\nopen NUnit.Framework\nopen FsUnit\n\n(**\nOne object equals or does not equal another:\n*)\n\n1 |> should equal 1\n1 |> should not' (equal 2)\n\n(**\nOne collection is equivalent or is not equivalent to another (order doesn't matter):\n*)\n\n[2;4;6] |> should equivalent [4;6;2]\n[2;4;6] |> should not' (equivalent [4;8;2])\n\n\n(**\nOne numeric object equals or does not equal another, with a specified tolerance:\n*)\n10.1 |> should (equalWithin 0.1) 10.11\n10.1 |> should not' ((equalWithin 0.001) 10.11)\n\n(**\nA string does or does not start with or end with a specified substring:\n*)\n\"ships\" |> should startWith \"sh\"\n\"ships\" |> should not' (startWith \"ss\")\n\"ships\" |> should endWith \"ps\"\n\"ships\" |> should not' (endWith \"ss\")\n\"ships\" |> should haveSubstring \"hip\"\n\"ships\" |> should not' (haveSubstring \"pip\")\n\n(**\nA List, Seq, or Array instance contains or does not contain a value:\n*)\n[1] |> should contain 1\n[] |> should not' (contain 1)\n\n(**\nA List or Array instance has a certain length:\n*)\nanArray |> should haveLength 4\n\n(**\nA Collection instance has a certain count:\n*)\naCollection |> should haveCount 4\n\n(**\nA function should throw a certain type of exception:\n*)\n(fun () -> failwith \"BOOM!\" |> ignore) |> should throw typeof<System.Exception>\n(fun () -> failwith \"BOOM!\" |> ignore) |> should (throwWithMessage \"BOOM!\") typeof<System.Exception>\n\n(**\nA function should fail\n*)\nshouldFail (fun () -> 5/0 |> ignore)\n\n(**\nA number of assertions can be created using the `be` keyword:\n*)\n\ntrue |> should be True\nfalse |> should not' (be True)\n\n\"\" |> should be EmptyString\n\"\" |> should be NullOrEmptyString\n\nnull |> should be NullOrEmptyString\nnull |> should be Null\nnull |> should be null\n\nanObj |> should not' (be Null)\nanObj |> should not' (be null)\nanObj |> should be (sameAs anObj)\nanObj |> should not' (be sameAs otherObj)\n\n11 |> should be (greaterThan 10)\n9 |> should not' (be greaterThan 10)\n11 |> should be (greaterThanOrEqualTo 10)\n9 |> should not' (be greaterThanOrEqualTo 10)\n10 |> should be (lessThan 11)\n10 |> should not' (be lessThan 9)\n10.0 |> should be (lessThanOrEqualTo 10.1)\n10 |> should not' (be lessThanOrEqualTo 9)\n\n0.0 |> should be ofExactType<float>\n1 |> should not' (be ofExactType<obj>)\n\n[] |> should be Empty\n[1] |> should not' (be Empty)\n\n\"test\" |> should be instanceOfType<string>\n\"test\" |> should not' (be instanceOfType<int>)\n\n2.0 |> should not' (be NaN)\n\n[1;2;3] |> should be unique\n\n[1;2;3] |> should be ascending\n[1;3;2] |> should not' (be ascending)\n[3;2;1] |> should be descending\n[3;1;2] |> should not' (be descending)\n\n[1..10] |> should be (supersetOf [3;6;9])\n[1..10] |> should not' (be supersetOf [5;11;21])\n\n[3;6;9] |> should be (subsetOf [1..10])\n[5;11;21] |> should not' (be subsetOf [1..10])\n\n(**\nThe ofCase operator allows you to check the case of a union.\nSupplying an expression that will result in a non-union type as well as supplying a non-union type as value argument will result in an exception detailing which parameter is wrong. Note that the actual value of the case is NOT checked, e.g. using `<@ MyCase 5 @>` as expression and `(MyCase 10)` as parameter will succeed. It is possible to check for more than one case by using a tuple of union cases.\n*)\ntype TestUnion = First | Second of int | Third of string\n\nFirst |> should be (ofCase<@ First @>)\nFirst |> should be (ofCase<@ First, Second @>) // checks if on the cases matches the given case\nSecond 5 |> should be (ofCase<@ Second 10 @>) // note, the actual value is not checked!\nFirst |> should not' (be ofCase<@ Second 5 @>)\n5 |> should be (ofCase<@ Second 5 @>) // will throw an exception\nSecond 5 |> should be (ofCase<@ int @>) // will throw an exception\n\n(**\n\nTest Projects Targeting Higher F# Runtimes\n------------------------------------------\n\nIf you build your test project with a target F# runtime greater than the targeted runtime of the FsUnit assembly, you may find FsUnit operators failing at runtime, in which case you need to add a binding redirect to the App.config file.\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n      <runtime>\n        <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n          <dependentAssembly>\n            <assemblyIdentity name=\"FSharp.Core\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n            <bindingRedirect oldVersion=\"0.0.0.0-999.999.999.999\" newVersion=\"4.4.0.0\" />\n          </dependentAssembly>\n        </assemblyBinding>\n      </runtime>\n    </configuration>\n\nContributing\n------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork\nthe project and submit pull requests. If you're adding a new public API, please also\nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\n  [content]: http://fsprojects.github.io/FsUnit/#Syntax\n  [gh]: https://github.com/fsprojects/FsUnit\n  [issues]: https://github.com/fsprojects/FsUnit/issues\n  [readme]: https://github.com/fsprojects/FsUnit/blob/master/README.md\n*)"},{"uri":"http://fsprojects.github.io/FsUnitMsTest.html","title":"FsUnit for MsTest\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \"../packages/MSTest.TestFramework/lib/netstandard1.0/Microsoft.VisualStudio.TestPlatform.TestFramework.dll\"\n#r \"../packages/NHamcrest/lib/netstandard1.5/NHamcrest.dll\"\n#r \"../bin/FsUnit.MsTest/netstandard2.0/FsUnit.MsTest.dll\"\n\n(**\nFsUnit for MsTest\n========================\n\n<div class=\"row\">\n  <div class=\"span1\"></div>\n  <div class=\"span6\">\n    <div class=\"well well-small\" id=\"nuget\">\n      The FsUnit library for MsTest can be <a href=\"https://www.nuget.org/packages/Fs30Unit.MsTest/\">installed from NuGet</a>:\n      <pre>PM> Install-Package Fs30Unit.MsTest</pre>\n      Sample FsUnit tests for MsTest can be <a href=\"https://www.nuget.org/packages/Fs30Unit.MsTest.Sample/\">installed from NuGet</a>:\n      <pre>PM> Install-Package Fs30Unit.MsTest.Sample</pre>\n    </div>\n  </div>\n  <div class=\"span1\"></div>\n</div>\n\nEuler - Problem 1\n-----------------\n*)\nmodule ``Project Euler - Problem 1`` =\n    open Microsoft.VisualStudio.TestTools.UnitTesting\n    open FsUnit.MsTest\n\n    let GetSumOfMultiplesOf3And5 max =\n        seq{3..max-1} |> Seq.fold(fun acc number ->\n                            (if (number % 3 = 0 || number % 5 = 0) then\n                                acc + number else acc)) 0\n\n    [<TestMethod>]\n    let ``When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23`` () =\n        GetSumOfMultiplesOf3And5(10) |> should equal 23\n\n(**\nLightBulb\n---------\n*)\nmodule ``LightBulb Tests`` =\n    open Microsoft.VisualStudio.TestTools.UnitTesting\n    open FsUnit.MsTest\n\n    type LightBulb(state) =\n        member x.On = state\n        override x.ToString() =\n            match x.On with\n            | true  -> \"On\"\n            | false -> \"Off\"\n\n    [<TestClass>]\n    type ``Given a LightBulb that has had its state set to true`` ()=\n        let lightBulb = new LightBulb(true)\n\n        [<TestMethod>] member x.\n         ``when I ask whether it is On it answers true.`` ()=\n                lightBulb.On |> should be True\n\n        [<TestMethod>] member x.\n         ``when I convert it to a string it becomes \"On\".`` ()=\n                string lightBulb |> should equal \"On\"\n\n    [<TestClass>]\n    type ``Given a LightBulb that has had its state set to false`` ()=\n        let lightBulb = new LightBulb(false)\n\n        [<TestMethod>] member x.\n         ``when I ask whether it is On it answers false.`` ()=\n                lightBulb.On |> should be False\n\n        [<TestMethod>] member x.\n         ``when I convert it to a string it becomes \"Off\".`` ()=\n                string lightBulb |> should equal \"Off\"\n\n\n(**\nBowlingGame\n---------\nThanks to `Keith Nicholas` and `Julian` from hubFS for this example!\n*)\nmodule ``BowlingGame A game of bowling`` =\n    open Microsoft.VisualStudio.TestTools.UnitTesting\n    open FsUnit.MsTest\n\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\n        match l with\n        | _ when frame = 11            -> EndOfGame(0)\n        | [10;s]                       -> IncompleteStrike(10+s+s)\n        | 10::s::n::tail               -> Strike(10+s+n, s::n::tail)\n        |  f::s::n::tail when f+s = 10 -> Normal(f+s+n,  n::tail)\n        |  f::s::n::tail               -> Normal(f+s,    n::tail)\n        | ls                           -> Other(List.fold (+) 0 ls)\n\n    let scoreBowls bowls =\n        let rec scoreBowls' frame l current_score =\n            let nextframe = scoreBowls' (frame+1)\n            match (l, frame) with\n            | EndOfGame(score)        -> current_score + score\n            | IncompleteStrike(score) -> current_score + score\n            | Strike(score, l)        -> nextframe l (current_score + score)\n            | Normal(score, l)        -> nextframe l (current_score + score)\n            | Other(score)            -> current_score + score\n        scoreBowls' 1 bowls 0\n\n    [<TestMethod>]\n    let ``with simple scores should get the expected score.`` () =\n        scoreBowls [1;2;3] |> should equal 6\n\n    [<TestMethod>]\n    let ``with a spare should get the expected score (spare).`` () =\n        scoreBowls [2;8;1] |> should equal 12\n\n    [<TestMethod>]\n    let ``with a strike should get the expected score (strike).`` () =\n        scoreBowls [10;1;2] |> should equal 16\n\n    [<TestMethod>]\n    let ``that is perfect should get a score of 300.``() =\n        scoreBowls [for i in 1..18 -> 10] |> should equal 300\n\n    [<TestMethod>]\n    let ``with spares in the last frame should get the expected score (spare in last frame).`` () =\n        scoreBowls ([for i in 1..18 -> 0] @ [2;8;1]) |> should equal 11\n\n    [<TestMethod>]\n    let ``with a strike in the last frame should get the expected score (strike in last frame).`` () =\n        scoreBowls ([for i in 1..18 -> 0] @ [10;10;1]) |> should equal 21\n\n    [<TestMethod>]\n    let ``with double strikes should add the score of the first strike to the score of the second.`` () =\n        scoreBowls [10;10;1] |> should equal 33\n\n    [<TestMethod>]\n    let ``that looks like an average bowler's game should get the expected score (example game).`` () =\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |> should equal 133"},{"uri":"http://fsprojects.github.io/FsUnitNUnit.html","title":"FsUnit for NUnit\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \"../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\"\n#r \"../bin/FsUnit.NUnit/netstandard2.0/FsUnit.NUnit.dll\"\n\nopen NUnit.Framework\n(**\nFsUnit for NUnit\n========================\n\n<div class=\"row\">\n  <div class=\"span1\"></div>\n  <div class=\"span6\">\n    <div class=\"well well-small\" id=\"nuget\">\n      The FsUnit library for NUnit can be <a href=\"https://nuget.org/packages/FsUnit\">installed from NuGet</a>:\n      <pre>PM> Install-Package FsUnit</pre>\n      Sample FsUnit tests for NUnit can be <a href=\"https://nuget.org/packages/FsUnit.Sample\">installed from NuGet</a>:\n      <pre>PM> Install-Package FsUnit.Sample</pre>\n    </div>\n  </div>\n  <div class=\"span1\"></div>\n</div>\n\nInitialization\n--------------\n\nIf you reference `FsUnit` from `NuGet` and want to use pretty-printed F# value types in error messages, you have to register custom values formatters.\n\n__SetUpFixture__\n\nAdd following piece of code to your assembly to register formatter for namespace or entire assembly\n*)\nopen FsUnit\n\ntype InitMsgUtils() =\n    inherit FSharpCustomMessageFormatter()\n\n(**\n\n> The OneTimeSetUp method in a SetUpFixture is executed once before any of the fixtures contained in its namespace. \n> A SetUpFixture outside of any namespace provides SetUp and TearDown for the entire assembly.\n\nIn F# you can use [namespace global](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/namespaces#global-namespace) to create `InitMsgUtils` outside of any namespace.\n\n__SetUp__\n\nAs an alternative solution you can initialize `FSharpCustomMessageFormatter` for single test fixture from your setup method:\n*)\n\nopen FsUnit\n\n[<TestFixture>]\ntype MyTests () =\n\n    [<SetUp>]\n    member __.setup () =\n        FSharpCustomMessageFormatter() |> ignore\n\n(**\n\nEuler - Problem 1\n-----------------\n*)\nmodule ``Project Euler - Problem 1`` =\n    open NUnit.Framework\n    open FsUnit\n\n    let GetSumOfMultiplesOf3And5 max =\n        seq{3..max-1} |> Seq.fold(fun acc number ->\n                            (if (number % 3 = 0 || number % 5 = 0) then\n                                acc + number else acc)) 0\n\n    [<Test>]\n    let ``When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23`` () =\n        GetSumOfMultiplesOf3And5(10) |> should equal 23\n\n(**\nLightBulb\n---------\n*)\nmodule ``LightBulb Tests`` =\n    open NUnit.Framework\n    open FsUnit\n\n    type LightBulb(state) =\n        member x.On = state\n        override x.ToString() =\n            match x.On with\n            | true  -> \"On\"\n            | false -> \"Off\"\n\n    [<TestFixture>]\n    type ``Given a LightBulb that has had its state set to true`` ()=\n        let lightBulb = new LightBulb(true)\n\n        [<Test>] member x.\n         ``when I ask whether it is On it answers true.`` ()=\n                lightBulb.On |> should be True\n\n        [<Test>] member x.\n         ``when I convert it to a string it becomes \"On\".`` ()=\n                string lightBulb |> should equal \"On\"\n\n    [<TestFixture>]\n    type ``Given a LightBulb that has had its state set to false`` ()=\n        let lightBulb = new LightBulb(false)\n\n        [<Test>] member x.\n         ``when I ask whether it is On it answers false.`` ()=\n                lightBulb.On |> should be False\n\n        [<Test>] member x.\n         ``when I convert it to a string it becomes \"Off\".`` ()=\n                string lightBulb |> should equal \"Off\"\n\n(**\nBowlingGame\n---------\nThanks to `Keith Nicholas` and `Julian` from hubFS for this example!\n*)\nmodule ``BowlingGame A game of bowling`` =\n    open NUnit.Framework\n    open FsUnit\n\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\n        match l with\n        | _ when frame = 11            -> EndOfGame(0)\n        | [10;s]                       -> IncompleteStrike(10+s+s)\n        | 10::s::n::tail               -> Strike(10+s+n, s::n::tail)\n        |  f::s::n::tail when f+s = 10 -> Normal(f+s+n,  n::tail)\n        |  f::s::n::tail               -> Normal(f+s,    n::tail)\n        | ls                           -> Other(List.fold (+) 0 ls)\n\n    let scoreBowls bowls =\n        let rec scoreBowls' frame l current_score =\n            let nextframe = scoreBowls' (frame+1)\n            match (l, frame) with\n            | EndOfGame(score)        -> current_score + score\n            | IncompleteStrike(score) -> current_score + score\n            | Strike(score, l)        -> nextframe l (current_score + score)\n            | Normal(score, l)        -> nextframe l (current_score + score)\n            | Other(score)            -> current_score + score\n        scoreBowls' 1 bowls 0\n\n    [<Test>]\n    let ``with simple scores should get the expected score.`` () =\n        scoreBowls [1;2;3] |> should equal 6\n\n    [<Test>]\n    let ``with a spare should get the expected score (spare).`` () =\n        scoreBowls [2;8;1] |> should equal 12\n\n    [<Test>]\n    let ``with a strike should get the expected score (strike).`` () =\n        scoreBowls [10;1;2] |> should equal 16\n\n    [<Test>]\n    let ``that is perfect should get a score of 300.``() =\n        scoreBowls [for i in 1..18 -> 10] |> should equal 300\n\n    [<Test>]\n    let ``with spares in the last frame should get the expected score (spare in last frame).`` () =\n        scoreBowls ([for i in 1..18 -> 0] @ [2;8;1]) |> should equal 11\n\n    [<Test>]\n    let ``with a strike in the last frame should get the expected score (strike in last frame).`` () =\n        scoreBowls ([for i in 1..18 -> 0] @ [10;10;1]) |> should equal 21\n\n    [<Test>]\n    let ``with double strikes should add the score of the first strike to the score of the second.`` () =\n        scoreBowls [10;10;1] |> should equal 33\n\n    [<Test>]\n    let ``that looks like an average bowler's game should get the expected score (example game).`` () =\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |> should equal 133\n\n(**\nNote: NUnit can also be utilized without specifying a type as in the examples for xUnit\n*)"},{"uri":"http://fsprojects.github.io/FsUnitoperators.html","title":"Operators comparison across frameworks\r\n","content":"Operators comparison across frameworks\r\n======================================\r\n\r\n| Operator               | NUnit | xUnit | MSTest |\r\n|------------------------|:-----:|:-----:|:------:|\r\n| `Null`                 | ✔     | ✔     | ✔     |\r\n| `Empty`                | ✔     | ✔     | ✔     |\r\n| `EmptyString`          | ✔     | ✔     | ✔     |\r\n| `NullOrEmptyString`    | ✔     | ✔     | ✔     |\r\n| `True`                 | ✔     | ✔     | ✔     |\r\n| `False`                | ✔     | ✔     | ✔     |\r\n| `NaN`                  | ✔     | ✔     | ✔     |\r\n| `unique`               | ✔     | ✔     | ✔     |\r\n| `should`               | ✔     | ✔     | ✔     |\r\n| `equal`                | ✔     | ✔     | ✔     |\r\n| `equivalent`           | ✔     | ❌    | ✔     |\r\n| `equalWithin`          | ✔     | ✔     | ✔     |\r\n| `contain`              | ✔     | ✔     | ✔     |\r\n| `haveLength`           | ✔     | ✔     | ✔     |\r\n| `haveCount`            | ✔     | ✔     | ✔     |\r\n| `be`                   | ✔     | ✔     | ✔     |\r\n| `sameAs`               | ✔     | ✔     | ✔     |\r\n| `throw`                | ✔     | ✔     | ✔     |\r\n| `throwWithMessage`     | ✔     | ✔     | ✔     |\r\n| `greaterThan`          | ✔     | ✔     | ✔     |\r\n| `greaterThanOrEqualTo` | ✔     | ✔     | ✔     |\r\n| `lessThan`             | ✔     | ✔     | ✔     |\r\n| `lessThanOrEqualTo`    | ✔     | ✔     | ✔     |\r\n| `shouldFail`           | ✔     | ✔     | ✔     |\r\n| `endWith`              | ✔     | ✔     | ✔     |\r\n| `startWith`            | ✔     | ✔     | ✔     |\r\n| `haveSubstring`        | ✔     | ✔     | ✔     |\r\n| `ofExactType`          | ✔     | ✔     | ✔     |\r\n| `instanceOfType`       | ✔     | ✔     | ✔     |\r\n| `choice`               | ❌    | ✔     | ✔     |\r\n| `ascending`            | ✔     | ✔     | ✔     |\r\n| `descending`           | ✔     | ✔     | ✔     |\r\n| `not'`                 | ✔     | ✔     | ✔     |\r\n| `matchList`            | ❌    | ✔     | ✔     |\r\n| `inRange`              | ✔     | ✔     | ✔     |\r\n| `ofCase`               | ✔     | ✔     | ✔     |\r\n| `supersetOf`           | ✔     | ✔     | ✔     |\r\n| `subsetOf`             | ✔     | ✔     | ✔     |"},{"uri":"http://fsprojects.github.io/FsUnitxUnit.html","title":"FsUnit for xUnit\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \"../packages/xunit.extensibility.core/lib/netstandard1.1/xunit.core.dll\"\n#r \"../packages/NHamcrest/lib/netstandard1.5/NHamcrest.dll\"\n#r \"../bin/FsUnit.Xunit/netstandard2.0/FsUnit.Xunit.dll\"\n\n(**\nFsUnit for xUnit\n========================\n\n<div class=\"row\">\n  <div class=\"span1\"></div>\n  <div class=\"span6\">\n    <div class=\"well well-small\" id=\"nuget\">\n      The FsUnit library for xUnit can be <a href=\"https://nuget.org/packages/FsUnit.xUnit\">installed from NuGet</a>:\n      <pre>PM> Install-Package FsUnit.xUnit</pre>\n      Sample FsUnit tests for xUnit can be <a href=\"https://nuget.org/packages/FsUnit.xUnit.Sample\">installed from NuGet</a>:\n      <pre>PM> Install-Package FsUnit.xUnit.Sample</pre>\n    </div>\n  </div>\n  <div class=\"span1\"></div>\n</div>\n\nEuler - Problem 1\n-----------------\n*)\nmodule ``Project Euler - Problem 1`` =\n    open Xunit\n    open FsUnit.Xunit\n\n    let GetSumOfMultiplesOf3And5 max =\n        seq{3..max-1} |> Seq.fold(fun acc number ->\n                            (if (number % 3 = 0 || number % 5 = 0) then\n                                acc + number else acc)) 0\n\n    [<Fact>]\n    let ``When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23`` () =\n        GetSumOfMultiplesOf3And5(10) |> should equal 23\n\n(**\nLightBulb\n---------\n*)\nmodule ``LightBulb Tests`` =\n    open Xunit\n    open FsUnit.Xunit\n\n    type LightBulb(state) =\n        member x.On = state\n        override x.ToString() =\n            match x.On with\n            | true  -> \"On\"\n            | false -> \"Off\"\n\n    type ``Given a LightBulb that has had its state set to true`` ()=\n        let lightBulb = new LightBulb(true)\n\n        [<Fact>] member x.\n         ``when I ask whether it is On it answers true.`` ()=\n                lightBulb.On |> should be True\n\n        [<Fact>] member x.\n         ``when I convert it to a string it becomes \"On\".`` ()=\n                string lightBulb |> should equal \"On\"\n\n    type ``Given a LightBulb that has had its state set to false`` ()=\n        let lightBulb = new LightBulb(false)\n\n        [<Fact>] member x.\n         ``when I ask whether it is On it answers false.`` ()=\n                lightBulb.On |> should be False\n\n        [<Fact>] member x.\n         ``when I convert it to a string it becomes \"Off\".`` ()=\n                string lightBulb |> should equal \"Off\"\n\n\n(**\nBowlingGame\n---------\nThanks to `Keith Nicholas` and `Julian` from hubFS for this example!\n*)\nmodule ``BowlingGame A game of bowling`` =\n    open Xunit\n    open FsUnit.Xunit\n\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\n        match l with\n        | _ when frame = 11            -> EndOfGame(0)\n        | [10;s]                       -> IncompleteStrike(10+s+s)\n        | 10::s::n::tail               -> Strike(10+s+n, s::n::tail)\n        |  f::s::n::tail when f+s = 10 -> Normal(f+s+n,  n::tail)\n        |  f::s::n::tail               -> Normal(f+s,    n::tail)\n        | ls                           -> Other(List.fold (+) 0 ls)\n\n    let scoreBowls bowls =\n        let rec scoreBowls' frame l current_score =\n            let nextframe = scoreBowls' (frame+1)\n            match (l, frame) with\n            | EndOfGame(score)        -> current_score + score\n            | IncompleteStrike(score) -> current_score + score\n            | Strike(score, l)        -> nextframe l (current_score + score)\n            | Normal(score, l)        -> nextframe l (current_score + score)\n            | Other(score)            -> current_score + score\n        scoreBowls' 1 bowls 0\n\n    [<Fact>]\n    let ``with simple scores should get the expected score.`` () =\n        scoreBowls [1;2;3] |> should equal 6\n\n    [<Fact>]\n    let ``with a spare should get the expected score (spare).`` () =\n        scoreBowls [2;8;1] |> should equal 12\n\n    [<Fact>]\n    let ``with a strike should get the expected score (strike).`` () =\n        scoreBowls [10;1;2] |> should equal 16\n\n    [<Fact>]\n    let ``that is perfect should get a score of 300.``() =\n        scoreBowls [for i in 1..18 -> 10] |> should equal 300\n\n    [<Fact>]\n    let ``with spares in the last frame should get the expected score (spare in last frame).`` () =\n        scoreBowls ([for i in 1..18 -> 0] @ [2;8;1]) |> should equal 11\n\n    [<Fact>]\n    let ``with a strike in the last frame should get the expected score (strike in last frame).`` () =\n        scoreBowls ([for i in 1..18 -> 0] @ [10;10;1]) |> should equal 21\n\n    [<Fact>]\n    let ``with double strikes should add the score of the first strike to the score of the second.`` () =\n        scoreBowls [10;10;1] |> should equal 33\n\n    [<Fact>]\n    let ``that looks like an average bowler's game should get the expected score (example game).`` () =\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |> should equal 133"}]